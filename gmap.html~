<!DOCTYPE html>
<html>
	<head>
		<title>The map for Autolab</title>
		<meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no">
		<meta charset="utf-8">
		<style>
			html, body, #map_canvas {
				margin: 0;
				padding: 0;
				height: 90%;
				width: 100%;
			}
		</style>
		<script src="https://maps.googleapis.com/maps/api/js?v=3.exp&sensor=false"></script>
		<script>
//document.getElementById("debug").innerHTML = 'debug: ' + c.length;
var TIME_OUT = 1000, lab = [49.276802, -122.914913], OFFSET = .0005, GRID_SIZE = .0005, GRID_NUM = 20, TRAJ_NUM = 50, ROBOT_NUM = 10;
var map, last_coord = new Array(), coord = new Array();
var rpath = new Array(), grid = new Array(), view_type = "basic", redis_ret = {}, robot = new Array();
function clear_grid()
{
	for (var i = 0; i < grid.length; ++ i)
	{
		grid[i].setMap(null);
	}
	grid.splice(0, grid.length);
}
function change_view(form)
{
	if (form.view.value == view_type)
		return;
	clear_grid();
	view_type = form.view.value;
}
function connectRedis(file, cmd)
{
//document.getElementById("debug").innerHTML = 'debug: ' + file;
	var xmlhttp;
	if (window.XMLHttpRequest)
	{// code for IE7+, Firefox, Chrome, Opera, Safari
		xmlhttp=new XMLHttpRequest();
	}
	else
	{// code for IE6, IE5
		xmlhttp=new ActiveXObject("Microsoft.XMLHTTP");
	}
	xmlhttp.onreadystatechange=function()
	{
		if (xmlhttp.readyState==4 && xmlhttp.status==200)
		{
			redis_ret[file+cmd] = xmlhttp.responseText;
		}
	}
	xmlhttp.open("GET",file + ".php?" + cmd, true);
	xmlhttp.send();
	if (! ((file+cmd) in redis_ret))
	{
		redis_ret[file+cmd] = "";
	}
}
function robot_move()
{
	connectRedis("connectRedis", "");
	var ret = redis_ret["connectRedis"].split(", ");
	for (var i = 0; i < ret.length; ++ i)
	{
		var j = ret[i].split(" ");
		var x = parseFloat(j[1]), y = parseFloat(j[2]);
		if (x == undefined || isNaN(x) || y == undefined || isNaN(y))
			continue;
		last_coord[i] = coord[i];
		//coord[i] = [coord[i][0] + j[1] / 100 * OFFSET - OFFSET / 2, coord[i][1] + j[2] / 100 * OFFSET - OFFSET / 2];
		coord[i] = [j[1], j[2]];
		if (coord[i] == last_coord[i])
		{
			continue;
		}
		while (rpath[i].length >= TRAJ_NUM)
		{
			rpath[i][0].setMap(null);
			rpath[i].splice(0, 1);
		}
		var color, weight;
		if (view_type == "colorful")
		{
			color = "#" + Math.floor(Math.random()*16777215).toString(16);
			weight = 4;
		} else
		{
			color = "black";
			weight = 2;
		}
		if (typeof robot[i] != "undefined")
		{
			robot[i].setMap(null);
		}
		robot[i] = new google.maps.Marker({
			position: new google.maps.LatLng(coord[i][0], coord[i][1]),
			map: map,
			title:"robot"+i
		});
		rpath[i].push(new google.maps.Polyline({
			map: map,
			path: [new google.maps.LatLng(last_coord[i][0], last_coord[i][1]), new google.maps.LatLng(coord[i][0], coord[i][1])],
			strokeColor: color,
			strokeOpacity: 1,
			strokeWeight: weight
		}));
	}
	window.setTimeout(robot_move, TIME_OUT);
}
function cal_grid()
{
	var grid_size = GRID_SIZE * Math.pow(17, 10) / Math.pow(map.getZoom(), 10);
	connectRedis("calGrid", "grid_size=" + grid_size + "&type=energy");
	var ret = redis_ret["calGrid"+"grid_size=" + grid_size + "&type=energy"].split(" ");
document.getElementById("debug").innerHTML = 'debug: ' + redis_ret["calGrid"+"grid_size=" + grid_size + "&type=energy"];
	if ((view_type == "energy" || view_type == "time") && ret.length >= 3)
	{
		clear_grid();
		for (var i = 0; i + 2 < ret.length; i += 3)
		{
			var x = ret[i];//Math.round(Math.random() * GRID_NUM - GRID_NUM / 2);
			var y = ret[i+1];
			var color = ret[i+2];//Math.round(Math.random() * 160).toString(16);
			if (color.length == 1)
			{
				color = "0" + color;
			}
			else if (color.length > 2)
			{
				color = color.substr(0, 2);
			}
			if (view_type == "energy")
			{
				color = "#FF" + color + color;
			}
			else if (view_type == "time")
			{
				color = "#" + color + color + "FF";
			}
			grid.push(new google.maps.Rectangle({
				strokeColor: 'grey',
				strokeOpacity: 0.2,
				strokeWeight: 1,
				fillColor: color,
				fillOpacity: 0.8,
				map: map,
				bounds: new google.maps.LatLngBounds(
					new google.maps.LatLng(lab[0] + x * grid_size, lab[1] + y * grid_size),
					new google.maps.LatLng(lab[0] + x * grid_size + grid_size, lab[1] + y * grid_size + grid_size))
			}));
		}
	}
document.getElementById("debug2").innerHTML = 'debug2: ' + grid.length;
	window.setTimeout(cal_grid, TIME_OUT);
}
function initialize() {
	var mapOptions = {
		zoom: 17,
		center: new google.maps.LatLng(lab[0], lab[1]),
		mapTypeId: google.maps.MapTypeId.ROADMAP
	};
	map = new google.maps.Map(document.getElementById('map_canvas'),
		mapOptions);
	var marker = new google.maps.Marker({
		position: new google.maps.LatLng(lab[0], lab[1]),
		map: map,
		title: 'Autonomy Lab at Simon Fraser University'
	});
	for (var i = 0; i < ROBOT_NUM; ++ i)
	{
		coord.push([lab[0], lab[1]]);
		rpath.push(new Array());
	}
	robot_move();
	cal_grid();
	google.maps.event.addListener(map, 'zoom_changed', function()
	{
		clear_grid();
	});
}
google.maps.event.addDomListener(window, 'load', initialize);
		</script>
	</head>
	<body>
		<div id="map_canvas"></div>
		<form align="center">
			<select name="view" onClick="change_view(this.form)">
				<option value="basic" selected="selected">basic</option>
				<option value="energy">energy map</option>
				<option value="time">time map</option>
				<option value="colorful">colorful trajectory</option>
			</select>
		</form>
		<p id="debug">debug: </p>
		<p id="debug2">debug2: </p>
	</body>
</html>